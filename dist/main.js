(()=>{"use strict";async function e(e){try{const t=await fetch("https://api.weatherapi.com/v1/forecast.json?key=829d734e92bc4a00882163051232803&q="+e+"&days=7&aqi=no&alerts=no"),o=await t.json(),n=await fetch("https://api.weatherapi.com/v1/astronomy.json?key=829d734e92bc4a00882163051232803&q="+e+"&dt="),r=await n.json();!function(e,t){document.querySelector(".location").textContent=e.location.name,document.querySelector(".condition").textContent=e.current.condition.text;const o=document.querySelector(".temperature");o.textContent=e.current.temp_c+"°",document.querySelector(".humidity").textContent="Humidity: "+e.current.humidity+"%",document.querySelector(".wind").textContent="Wind: "+e.current.wind_kph+" kph";const n=document.querySelector(".through-day-temp");n.replaceChildren();for(let t=0;t<24;t++)n.innerHTML+=`<div class='hourly-temp'>\n        <div>${e.forecast.forecastday[0].hour[t].time.substr(11,5)}</div>\n        <div>${e.forecast.forecastday[0].hour[t].chance_of_rain}%</div>\n        <div><img src='${e.forecast.forecastday[0].hour[t].condition.icon}'></div>\n        <div class='temperatureHour'>${e.forecast.forecastday[0].hour[t].temp_c}°</div>\n        </div>`;let r=!0;const c=document.querySelector(".change-cel-fah"),a=document.querySelectorAll(".temperatureHour");c.addEventListener("click",(()=>{if(r){o.textContent=e.current.temp_f+"°",document.querySelector(".feels-like").textContent=e.current.feelslike_f+"°";for(let t=0;t<24;t++)a[t].textContent=e.forecast.forecastday[0].hour[t].temp_f+"°";const t=document.querySelectorAll(".week-temperature");for(let o=0;o<7;o++)t[o].textContent=e.forecast.forecastday[o].day.avgtemp_f+"°";r=!1}else{o.textContent=e.current.temp_c+"°",document.querySelector(".feels-like").textContent=e.current.feelslike_c+"°";for(let t=0;t<24;t++)a[t].textContent=e.forecast.forecastday[0].hour[t].temp_c+"°";const t=document.querySelectorAll(".week-temperature");for(let o=0;o<7;o++)t[o].textContent=e.forecast.forecastday[o].day.avgtemp_c+"°";r=!0}})),document.querySelector(".sunrise").textContent=t.astronomy.astro.sunrise,document.querySelector(".sunset").textContent=t.astronomy.astro.sunset,document.querySelector(".feels-like").textContent=e.current.feelslike_c+"°",document.querySelector(".humidity-info").textContent=e.current.humidity+"%",document.querySelector(".wind-direction").textContent=e.current.wind_dir,document.querySelector(".pressure").textContent=e.current.pressure_mb+" hPa",document.querySelector(".visibility").textContent=e.current.vis_km+" km",document.querySelector(".uv-index").textContent=e.current.uv;const s=document.querySelector(".week-temp");for(let t=0;t<7;t++){let o=new Date(e.forecast.forecastday[t].date).toString();s.innerHTML+=`\n        <div class='day'>\n        <div class='week-day'>${o.substr(0,10)}</div>\n        <div class='week-condition'><img src='${e.forecast.forecastday[t].day.condition.icon}'></div>\n        <div class='week-rain'>${e.forecast.forecastday[t].day.daily_chance_of_rain}%</div>\n        <div class='week-humidity'>${e.forecast.forecastday[t].day.avghumidity}%</div>\n        <div class='week-temperature'>${e.forecast.forecastday[t].day.avgtemp_c}°</div>\n        </div>\n        `}}(o,r),console.log(o.forecast.forecastday[0].hour[0]),console.log(o),console.log(r),console.log(o.current.temp_c),console.log("feels like: "+o.current.feelslike_c+" C"),console.log(o.current.condition.text)}catch(e){console.log(e)}}e("Milan"),function(){let t;document.querySelector(".search-button").addEventListener("click",(o=>{const n=document.querySelector("#place");t=n.value,console.log(t),e(t),o.preventDefault()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,